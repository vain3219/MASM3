Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/19/18 21:12:36
string1.asm						     Page 1 - 1


				;----------------------------------------------------------------------------------------------------
				;	FILE NAME : string1.asm
				;----------------------------------------------------------------------------------------------------
				;
				;		Program Name	:	MASM3
				;		Programmer		:	Cody Thompson 
				;		Class			:	CS 3B || Asm Lang
				;		Date			:	4/02/2018
				;		Purpose			:
				;		This file contains the definitions for the external sub routines that will be called by the driver
				;	MASM3.asm
				;----------------------------------------------------------------------------------------------------

					.486

					;Includes
					include ..\..\Irvine\Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

					;Prototypes
					getstring			PROTO Near32 stdcall, lpStringToGet:dword, dlength:dword
					putstring			PROTO Near32 stdcall, lpStringToPrint:dword
					memoryallocBailey	PROTO NEAR32 stdcall, dSize:dword
					ascint32			PROTO Near32 stdcall, lpStringToConvert:dword  
					String_length		PROTO intStrAddr:dword
					ExitProcess			PROTO, dwExitCode:dword

					;Constants


					;Data segment
 00000000				.data
 00000000 50 6C 65 61 73	strSetString		 		BYTE 	"Please input a string: ", 0
	   65 20 69 6E 70
	   75 74 20 61 20
	   73 74 72 69 6E
	   67 3A 20 00
					
 00000018 0A 00			strNwLn						BYTE 	0Ah, 0	
					;Code segment
 00000000				.code						

				;----------------------------------------------------------------------------------------------------
 00000000			setString proc PUBLIC
				;
				;		Sets the value of String1.
				;
				;	Receives the offset address of strString1 from masm3.asm.
				;	Returns nothing
				;----------------------------------------------------------------------------------------------------
 = [EBP + 8]			intStrAddr EQU [EBP + 8]
 00000000  55				PUSH EBP
 00000001  8B EC			MOV EBP, ESP
					
 00000003  E8 00000000 E		CALL Clrscr										;clear the screen
					
					INVOKE putString, addr strSetString				;output strSetString to the console
					INVOKE getString, intStrAddr, 32				;get input from the console and store it in memory labeled intStr1Addr
					
 0000001C  5D				POP EBP
 0000001D  C3				RET												;return
 0000001E			setString ENDP									;end of setString1

				;----------------------------------------------------------------------------------------------------
 0000001E			String_equals proc PUBLIC
				;
				;		This sub routine will compare strString1 and strString2 for an exact match.  This is a case
				;	and length sensitive comparison.  If a match is found 01 will be returned to the AL register,
				;	otherwise 00 will be returned if the comparison is false.
				;
				;	Receives the offset address of strString1, strString2, and lengths of both strString1 & 2 from the stack 
				;	Returns results to the AL register
				;----------------------------------------------------------------------------------------------------
 = [EBP+8]			intStr1Addr EQU [EBP+8]
 = [EBP+12]			intStr2Addr EQU [EBP+12]

 0000001E  55				PUSH EBP
 0000001F  8B EC			MOV EBP, ESP
					
 00000021  8B 7D 08			MOV EDI, intStr1Addr							;move intStr1Addr into EDI for indirect addressing
 00000024  8B 55 0C			MOV EDX, intStr2Addr							;move intStr2Addr into EDX for indirect addressing 
					INVOKE String_length, EDI						;get length of intStr1Addr
 0000002D  8B C8			MOV ECX, EAX									;set ECX equal to EAX
					
					INVOKE String_length, EDX						;get length of intStr2Addr
					
 00000035  3B C8			CMP ECX, EAX									;compare lengths of string1 and string2
 00000037  75 14			JNE NOTEQL										;if the lengths aren't equal jump to NOTEQL
					
 00000039  8B 7D 08			MOV EDI, intStr1Addr							;move intStr1Addr into EDI for indirect addressing
 0000003C  8B 55 0C			MOV EDX, intStr2Addr							;move intStr2Addr into EDX for indirect addressing 
					
 0000003F			L1:
 0000003F  8A 1F			MOV BL, [EDI]									;move the element at the address in EDI into BL
 00000041  3A 1A			CMP BL, [EDX]									;compare BL to the element at the address in EDX
 00000043  75 08			JNE NOTEQL										;if BL and [EDX] are not equal then jump to NOTEQL
 00000045  47				INC EDI											;go to the next element in EDI
 00000046  42				INC EDX											;go to the next element in EDX
 00000047  E2 F6			LOOP L1											;loop to L1
					
 00000049  B0 01			MOV AL, 1										;TRUE CONDITION -- move 1 into AL
 0000004B  EB 02			JMP RETURN										;jump to RETURN
					
 0000004D			NOTEQL:
 0000004D  B0 00			MOV AL, 0										;FALSE CONDITION -- move 0 into AL
					
 0000004F			RETURN:
 0000004F  5D				POP EBP
 00000050  C3				RET
 00000051			String_equals ENDP


				;----------------------------------------------------------------------------------------------------
 00000051			String_equalsIgnoreCase proc PUBLIC
				;
				;		This sub routine will compare strString1 and strString2 for an exact match.  This is not case
				;	sensitive but is length sensitive.  If a match is found 01 will be returned to the AL register,
				;	otherwise 00 will be returned if the comparison is false.
				;
				;	Receives the offset address of strString1, strString2, and lengths of both strString1 & 2 from the stack 
				;	Returns results to the AL register
				;----------------------------------------------------------------------------------------------------
 = [EBP+8]			intStr1Addr EQU [EBP+8]
 = [EBP+12]			intStr2Addr EQU [EBP+12]

 00000051  55				PUSH EBP										;save EBP
 00000052  8B EC			MOV EBP, ESP									;set EBP=ESP
					
 00000054  8B 7D 08			MOV EDI, intStr1Addr							;move intStr1Addr into EDI for indirect addressing
					INVOKE String_length, EDI

 0000005D  8B C8			MOV ECX, EAX        							;move intStr1Length into ECX for LOOP instruction
 0000005F  8B 55 0C			MOV EDX, intStr2Addr							;move intStr2Addr into EDX for indirect addressing 
					
					INVOKE String_length, EDX
					
 00000068  3B C8			CMP ECX, EAX									;compare lengths of string1 and string2
 0000006A  75 40			JNE NOTEQL										;if the lengths aren't equal jump to NOTEQL
					
 0000006C  8B 7D 08			MOV EDI, intStr1Addr							;move intStr1Addr into EDI for indirect addressing
 0000006F  8B 55 0C			MOV EDX, intStr2Addr							;move intStr2Addr into EDX for indirect addressing 
					
 00000072			L1:
 00000072  B8 00000001			MOV EAX, 1										;move 1 into EAX to keep track of how many times each index if compared (2 max)
 00000077  8A 1F			MOV BL, [EDI]									;move the element at the address in EDI into BL
 00000079			L2:	
 00000079  3A 1A			CMP BL, [EDX]									;compare BL to the element at the address in EDX
 0000007B  74 1B			JE MATCH										;jump to MATCH if BL == [EDX]
					
 0000007D  83 F8 00			CMP EAX, 0										;compare EAX to zero, checking if the index has been compared once already
 00000080  74 2A			JE NOTEQL										;jump to NOTEQL if EAX == 0
					
 00000082  80 FB 41			CMP BL, 41h										;ensure that BL isn't less than 41h (special character)
 00000085  7C 25			JL NOTEQL										;jump to NOTEQL if bl is less than 41h
 00000087  80 FB 5A			CMP BL, 5Ah										;ensure that BL is in the range of 41h - 5Ah
 0000008A  7C 14			JL UPPER										;if BL is less than 5A then it is within the range, jump to UPPER

 0000008C  80 FB 61			CMP BL, 61h										;ensure that BL isn't less than 61h (special character)
 0000008F  7C 1B			JL NOTEQL										;jump to NOTEQL if BL is less than 61h
 00000091  80 FB 7A			CMP BL, 7Ah										;ensure that BL is in the range of 61h - 7Ah
 00000094  7C 10			JL LOWER										;if BL is less than 7A then it is within the range, jump to LOWER
					
 00000096  75 14			JNE NOTEQL										;if BL and [EDX] are not equal then jump to NOTEQL
 00000098			MATCH:
 00000098  47				INC EDI											;go to the next element in EDI
 00000099  42				INC EDX											;go to the next element in EDX
 0000009A  E2 D6			LOOP L1											;loop to L1
					
 0000009C  B0 01			MOV AL, 1										;TRUE CONDITION -- move 1 into AL
 0000009E  EB 0E			JMP RETURN										;jump to RETURN
					
 000000A0			UPPER:
 000000A0  48				DEC EAX											;decrement EAX
 000000A1  80 C3 20			ADD BL, 20h										;add 20h to BL making it the lowercase complement
 000000A4  EB D3			JMP L2											;jump to L2
					
 000000A6			LOWER:
 000000A6  48				DEC EAX											;decrement EAX 
 000000A7  80 EB 20			SUB BL, 20h										;subtract 20h from BL making it the uppercase complement
 000000AA  EB CD			JMP L2											;jump to L2
					
 000000AC			NOTEQL:
 000000AC  B0 00			MOV AL, 0										;FALSE CONDITION -- move 0 into AL
					
 000000AE			RETURN:
 000000AE  5D				POP EBP
 000000AF  C3				RET
 000000B0			String_equalsIgnoreCase ENDP


				;----------------------------------------------------------------------------------------------------
 000000B0			String_copy proc PUBLIC
				;
				;		This sub routine will copy the contents of strString1 into newly allocated memory.  Memory will
				;	be allocated using Dr. Baileys memoryallocBailey procedure.  The address of the newly allocated 
				;	string with the copied contents will be returned to the EAX register.
				;
				;	Receives the address of strString1 and its length from the stack
				;	Returns the address of the new string to the EAX register
				;----------------------------------------------------------------------------------------------------
 = [EBP+8]			intStr1Addr EQU [EBP+8]	

 000000B0  55				PUSH EBP										;save EBP
 000000B1  8B EC			MOV EBP, ESP									;set EBP=ESP
					
 000000B3  8B 75 08			MOV ESI, intStr1Addr							;move the offset address of string1 into ESI
					INVOKE String_length, ESI						;get the length of ESI
 000000BC  8B C8			MOV ECX, EAX		 							;move the length of string1 into ECX
 000000BE  41				INC ECX											;increment ECX to account for the null terminator
					
					INVOKE memoryallocBailey, ECX					;allocate a memory of size string1Length +1
 000000C5  8B F8			MOV EDI, EAX									;move the newly allocated address into EDI
 000000C7  49				DEC ECX											;decrement ECX by one
					
 000000C8			L1:
 000000C8  8A 1E			MOV BL, [ESI]									;move the nth index of [ESI] into BL
 000000CA  88 1F			MOV [EDI], BL									;move BL into nth index of [EDI]
 000000CC  47				INC EDI											;increment EDI by one
 000000CD  46				INC ESI											;increment ESI by one 
 000000CE  E2 F8			LOOP L1											;LOOP to L1
					
 000000D0  8A 5E 01			MOV BL, [ESI + 1]								;move the null terminator into BL
 000000D3  88 5F 01			MOV [EDI + 1], BL								;move the null terminator into the last index of [EDI]
					
 000000D6  5D				POP EBP
 000000D7  C3				RET			
 000000D8			String_copy ENDP


				;----------------------------------------------------------------------------------------------------
 000000D8			String_substring_1 proc PUBLIC
				;
				;		This sub routine will create a newly allocated comprised of a sub string from the string of the 
				;	address provided on the stack.  A prompt will be displayed to the console asking the user for a 
				;	beginning and ending index.  The address of the newly allocated string will be return to the EAX
				;	register.
				;
				;	Receives the address of a string and its length
				;	Returns the address of the new string to the EAX register
				;----------------------------------------------------------------------------------------------------
 = [EBP+8]			intStrAddr  EQU [EBP+8]
 = [EBP+12]			intStartInd  EQU [EBP+12]
 = [EBP+16]			intEndInd  EQU [EBP+16]
					
 000000D8  55				PUSH EBP
					
 000000D9  8B EC			MOV EBP, ESP
					
 000000DB  8B 75 08			MOV ESI, intStrAddr								;move the offset address of intStrAddr into ESI
 000000DE  03 75 0C			ADD ESI, intStartInd							;move the to specified starting address
 000000E1  8B 4D 10			MOV ECX, intEndInd								;move the ending index number into ECX
 000000E4  2B 4D 0C			SUB ECX, intStartInd							;subtract tarting index from ending index to get 
					;INC ECX
					
					INVOKE memoryallocBailey, ECX					;allocate memory of size (end - start) + 1
 000000ED  8B F8			MOV EDI, EAX									;move the address of the newly allocated string into the ESI register
					
 000000EF			L1:
 000000EF  8A 1E			MOV BL, [ESI]									;move the nth element of [ESI] into BL
 000000F1  88 1F			MOV [EDI], BL									;move BL into the nth element of [EDI]
 000000F3  47				INC EDI											;increment EDI by one
 000000F4  46				INC ESI											;increment ESI by one
 000000F5  E2 F8			LOOP L1											;LOOP to L1
					
 000000F7  8A 5E 01			MOV BL, [ESI + 1]								;move the null terminator into BL
 000000FA  88 5F 01			MOV [EDI + 1], BL								;move BL into [EDI + 1]
 000000FD  EB 00			JMP RETURN										;jump to RETURN
					
 000000FF			RETURN:
 000000FF  5D				POP EBP
 00000100  C3				RET
 00000101			String_substring_1 ENDP


				;----------------------------------------------------------------------------------------------------
 00000101			String_substring_2 proc PUBLIC
				;
				;		This sub routine will create a newly allocated comprised of a sub string from the string of the 
				;	address provided on the stack.  A prompt will be displayed to the console asking the user for a 
				;	beginning index.  The address of the newly allocated string will be return to the EAX
				;	register.
				;
				;	Receives the address of a string and its length
				;	Returns the address of the new string to the EAX register
				;----------------------------------------------------------------------------------------------------
 = [EBP+8]			intStrAddr EQU [EBP+8]
 = [EBP+12]			intStartInd EQU [EBP+12]

 00000101  55				PUSH EBP										;save EBP on the stack	
 00000102  8B EC			MOV EBP, ESP									;set EBP = ESP
					
 00000104  8B 75 08			MOV ESI, intStrAddr								;move the offset address of intStrAddr into ESI
 00000107  03 75 0C			ADD ESI, intStartInd							;move the to specified starting address
					
					INVOKE String_length, intStrAddr				;get length of [intStrAddr]
 00000112  8B C8			MOV ECX, EAX									;move the length into ECX for LOOP
					
					INVOKE memoryallocBailey, ECX					;allocate memory of size (end - start) + 1
 0000011A  8B F8			MOV EDI, EAX									;move the address of the newly allocated string into the ESI register
					
 0000011C			L1:
 0000011C  8A 1E			MOV BL, [ESI]									;move the nth element of [ESI] into BL
 0000011E  88 1F			MOV [EDI], BL									;move BL into the nth element of [EDI]
 00000120  47				INC EDI											;increment EDI by one
 00000121  46				INC ESI											;increment ESI by one
 00000122  E2 F8			LOOP L1											;LOOP to L1
					
 00000124  8A 5E 01			MOV BL, [ESI + 1]								;move the null terminator into BL
 00000127  88 5F 01			MOV [EDI + 1], BL								;move BL into [EDI + 1]
 0000012A  EB 00			JMP RETURN										;jump to RETURN
					
 0000012C			RETURN:
 0000012C  5D				POP EBP
 0000012D  C3				RET
 0000012E			String_substring_2 ENDP


				;----------------------------------------------------------------------------------------------------
 0000012E			String_charat proc PUBLIC
				;
				;		This sub routine will return the character at the specified index to the AL register.  if the 
				;	index is an impossible location a 0 will be returned to the AL register.
				;
				;	Receives a string address and the length of that string from the stack
				;	Returns a character to the AL register
				;----------------------------------------------------------------------------------------------------
 = [EBP+8]			intStrAddr EQU [EBP+8]
 = [EBP+12]			intIndex EQU [EBP+12]

 0000012E  55				PUSH EBP
 0000012F  8B EC			MOV EBP, ESP
					
 00000131  8B 45 0C			MOV EAX, intIndex								;move index into EAX
 00000134  83 F8 01			CMP EAX, 1										;compare result to 1
 00000137  7C 1A			JL OUTOFBOUNDS									;jump to OUTOFBOUNDS if the input value is >1
					INVOKE String_length, intStrAddr				;get length of [intStrAddr]	
 00000141  39 45 0C			CMP intIndex, EAX								;compare result to stringLrngth
 00000144  7F 0D			JG OUTOFBOUNDS									;jump to OUTOFBOUNDS if the input value > length

 00000146  8B 45 0C			MOV EAX, intIndex
 00000149  48				DEC EAX											;decrement EAX
 0000014A  8B 7D 08			MOV EDI, intStrAddr								;move the offset address of the string into EDI
 0000014D  03 F8			ADD EDI, EAX									;move to the address of the specified index
 0000014F  8A 07			MOV AL, [EDI]									;move the contents at the index into AL
 00000151  EB 02			JMP RETURN
					
 00000153			OUTOFBOUNDS:
 00000153  B0 00			MOV AL, 0										;move 0 into AL
					
 00000155			RETURN:	
 00000155  5D				POP EBP
 00000156  C3				RET
 00000157			String_charat ENDP


				;-----------------------------------------------------------------------------------------------------------
 00000157			String_startsWith_1 proc PUBLIC
				;
				;		This sub routine checks if string1 starts with string2 at the specified starting position.
				;	If the comparison is true a 1 will be returned into the AL register, otherwise a zero will be returned.
				;
				;	Receives the addresses of string1, string2, and an integer
				;	Returns a 1 or 0 to the AL register
				;-----------------------------------------------------------------------------------------------------------
 = [EBP+8]			intStrAddr EQU [EBP+8]
 = [EBP+12]			intStr2Addr EQU [EBP+12]
 = [EBP+16]			intPos EQU [EBP+16]

 00000157  55				PUSH EBP										;save EBP
 00000158  8B EC			MOV EBP, ESP									;set ebp = esp
					
 0000015A  8B 7D 08			MOV EDI, intStrAddr								;move string1 address into EDI
 0000015D  8B 75 0C			MOV ESI, intStr2Addr							;move string2 address into ESI
 00000160  8B 5D 10			MOV EBX, intPos 								;move intPos into EBX
 00000163  03 FB			ADD EDI, ebx									;add the offset of the position to string1
 00000165  57				PUSH EDI										;push EDI because the next routine uses edi
					
					INVOKE String_length, ESI						;get the length of string2
 0000016C  8B C8			MOV ECX, EAX									;move the length of string2 into ECX
 0000016E  5F				POP EDI											;restore EDI
					
 0000016F			L1:
 0000016F  8A 1E			MOV BL, [ESI]									;move the nth element of string2 into BL
 00000171  3A 1F			CMP BL, [EDI]									;compare nth element to the n+pos'th element
 00000173  75 08			JNE NOTEQL										;jump if not equal
 00000175  46				INC ESI											;increment ESI
 00000176  47				INC EDI											;increment EDI
 00000177  E2 F6			LOOP L1											;loop to L1
					
 00000179  B0 01			MOV AL, 1										;move 1 into AL (true condition)
 0000017B  EB 02			JMP RETURN										;jump to return
					
 0000017D			NOTEQL:
 0000017D  B0 00			MOV AL, 0										;move 0 into AL (false condition)
					
 0000017F			RETURN:	
 0000017F  5D				POP EBP
 00000180  C3				RET
 00000181			String_startsWith_1 ENDP


				;----------------------------------------------------------------------------------------------------------
 00000181			String_startsWith_2 proc PUBLIC
				;
				;		This sub routine checks if string1 starts with string2 If the comparison is true a 1 will be 
				;	returned into the AL register, otherwise a zero will be returned.
				;
				;	Receives the addresses of string1, string2, and an integer
				;	Returns a 1 or 0 to the AL register
				;-----------------------------------------------------------------------------------------------------------
 = [EBP+8]			intStrAddr EQU [EBP+8]	
 = [EBP+12]			intStr2Addr EQU [EBP+12]

 00000181  55				PUSH EBP										;save EBP
 00000182  8B EC			MOV EBP, ESP									;set EBP=ESP
					
 00000184  8B 7D 08			MOV EDI, intStrAddr								;move string1 address into EDI
 00000187  8B 75 0C			MOV ESI, intStr2Addr							;move string2 address into ESI
 0000018A  57				PUSH EDI										;push EDI because the next routine uses edi
					
					INVOKE String_length, ESI						;get the length of string2
 00000191  8B C8			MOV ECX, EAX									;move the length of string2 into ECX
 00000193  5F				POP EDI											;restore EDI
					
 00000194			L1:
 00000194  8A 1E			MOV BL, [ESI]									;move the nth element of string2 into BL
 00000196  3A 1F			CMP BL, [EDI]									;compare nth element to the nth element
 00000198  75 08			JNE NOTEQL										;jump if not equal
 0000019A  46				INC ESI											;increment ESI
 0000019B  47				INC EDI											;increment EDI
 0000019C  E2 F6			LOOP L1											;loop to L1
					
 0000019E  B0 01			MOV AL, 1										;move 1 into AL (true condition)
 000001A0  EB 02			JMP RETURN										;jump to return
					
 000001A2			NOTEQL:
 000001A2  B0 00			MOV AL, 0										;move 0 into AL (false condition)
					
 000001A4			RETURN:	
 000001A4  5D				POP EBP
 000001A5  C3				RET
 000001A6			String_startsWith_2 ENDP


				;--------------------------------------------------------------------------------------------------------------
 000001A6			String_endsWith proc PUBLIC
				;
				;		This sub routine will check if string2 is equal to the suffix of string1.  If a match if is found 
				;	a 1 will be returned in the AL register.
				;
				;	Receives the address of two strings from the stack
				;	Returns a 1(true condition) or 0(false condition) to the AL register
				;--------------------------------------------------------------------------------------------------------------
 = [EBP+8]			intStrAddr EQU [EBP+8]
 = [EBP+12]			intStr2Addr EQU [EBP+12]

 000001A6  55				PUSH EBP										;save EBP
 000001A7  8B EC			MOV EBP, ESP									;set EBP=ESP
					
 000001A9  8B 7D 08			MOV EDI, intStrAddr								;move string1 address into EDI
 000001AC  8B 75 0C			MOV ESI, intStr2Addr							;move string2 address into ESI
 000001AF  57				PUSH EDI										;push EDI because the next routine uses edi
					
					INVOKE String_length, intStr2Addr				;get length of intStr2Addr
 000001B8  8B D8			MOV EBX, EAX									;move the length into EBX
 000001BA  53				PUSH EBX										;push EBX
					
					INVOKE String_length, intStrAddr				;get the length of int Str2Addr
 000001C3  5B				POP EBX											;pop EBX
					
 000001C4  2B C3			SUB EAX, EBX									;EAX - EBX
 000001C6  50				PUSH EAX										;push EAX
					
					INVOKE String_length, ESI						;get the length of string2
 000001CD  8B C8			MOV ECX, EAX									;move the length of string2 into ECX
 000001CF  58				POP EAX
 000001D0  5F				POP EDI											;restore EDI
					
 000001D1  03 F8			ADD EDI, EAX									;go to the beginning of the suffix
 000001D3			L1:
 000001D3  8A 1E			MOV BL, [ESI]									;move the nth element of string2 into BL
 000001D5  3A 1F			CMP BL, [EDI]									;compare nth element to the nth element
 000001D7  75 08			JNE NOTEQL										;jump if not equal
 000001D9  46				INC ESI											;increment ESI
 000001DA  47				INC EDI											;increment EDI
 000001DB  E2 F6			LOOP L1											;loop to L1
					
 000001DD  B0 01			MOV AL, 1										;move 1 into AL (true condition)
 000001DF  EB 02			JMP RETURN										;jump to return
					
 000001E1			NOTEQL:
 000001E1  B0 00			MOV AL, 0										;move 0 into AL (false condition)
					
 000001E3			RETURN:
 000001E3  5D				POP EBP
 000001E4  C3				RET
 000001E5			String_endsWith ENDP
				END








Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/19/18 21:12:36
string1.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000001A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001E5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_charat  . . . . . . . . .	P Near	 0000012E _TEXT	Length= 00000029 Public STDCALL
  OUTOFBOUNDS  . . . . . . . . .	L Near	 00000153 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 00000155 _TEXT	
String_copy  . . . . . . . . . .	P Near	 000000B0 _TEXT	Length= 00000028 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000C8 _TEXT	
String_endsWith  . . . . . . . .	P Near	 000001A6 _TEXT	Length= 0000003F Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000001D3 _TEXT	
  NOTEQL . . . . . . . . . . . .	L Near	 000001E1 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000001E3 _TEXT	
String_equalsIgnoreCase  . . . .	P Near	 00000051 _TEXT	Length= 0000005F Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000072 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000079 _TEXT	
  MATCH  . . . . . . . . . . . .	L Near	 00000098 _TEXT	
  UPPER  . . . . . . . . . . . .	L Near	 000000A0 _TEXT	
  LOWER  . . . . . . . . . . . .	L Near	 000000A6 _TEXT	
  NOTEQL . . . . . . . . . . . .	L Near	 000000AC _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000000AE _TEXT	
String_equals  . . . . . . . . .	P Near	 0000001E _TEXT	Length= 00000033 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000003F _TEXT	
  NOTEQL . . . . . . . . . . . .	L Near	 0000004D _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 0000004F _TEXT	
String_length  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_startsWith_1  . . . . . .	P Near	 00000157 _TEXT	Length= 0000002A Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000016F _TEXT	
  NOTEQL . . . . . . . . . . . .	L Near	 0000017D _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 0000017F _TEXT	
String_startsWith_2  . . . . . .	P Near	 00000181 _TEXT	Length= 00000025 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000194 _TEXT	
  NOTEQL . . . . . . . . . . . .	L Near	 000001A2 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000001A4 _TEXT	
String_substring_1 . . . . . . .	P Near	 000000D8 _TEXT	Length= 00000029 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000EF _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000000FF _TEXT	
String_substring_2 . . . . . . .	P Near	 00000101 _TEXT	Length= 0000002D Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000011C _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 0000012C _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
setString  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001E Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intEndInd  . . . . . . . . . . .	Text   	 [EBP+16]
intIndex . . . . . . . . . . . .	Text   	 [EBP+12]
intPos . . . . . . . . . . . . .	Text   	 [EBP+16]
intStartInd  . . . . . . . . . .	Text   	 [EBP+12]
intStr1Addr  . . . . . . . . . .	Text   	 [EBP+8]
intStr2Addr  . . . . . . . . . .	Text   	 [EBP+12]
intStrAddr . . . . . . . . . . .	Text   	 [EBP+8]
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
strNwLn  . . . . . . . . . . . .	Byte	 00000018 _DATA	
strSetString . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
