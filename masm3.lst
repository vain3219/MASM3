Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/19/18 21:12:36
masm3.asm						     Page 1 - 1


				;----------------------------------------------------------------------------------------------------
				;	FILE NAME : masm3.asm
				;----------------------------------------------------------------------------------------------------
				;
				;		Program Name	:	MASM3
				;		Programmer		:	Cody Thompson 
				;		Class			:	CS 3B || Asm Lang
				;		Date			:	4/02/2018
				;		Purpose			:
				;		This program will display a menu list of String-class-like operations that will be executed.
				;	After a menu choice is input and executed the menu will be updated to reflect the result of the 
				;	operation.
				;----------------------------------------------------------------------------------------------------

					.486

					;Includes
					include ..\..\Irvine\Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
					include string1.inc
			      C 
			      C setString PROTO 
			      C 
			      C String_equals PROTO
			      C 
			      C String_equalsIgnoreCase PROTO
			      C 
			      C String_copy PROTO 
			      C 
			      C String_substring_1 PROTO 
			      C 
			      C String_substring_2 PROTO
			      C 
			      C String_charat PROTO
			      C 
			      C String_startsWith_1 PROTO 
			      C 
			      C String_startsWith_2 PROTO 
			      C 
			      C String_endsWith PROTO 
			      C 
					include string2.inc
			      C  String_indexOf_1 PROTO
			      C 	 String_indexOf_2 PROTO
			      C 	 String_indexOf_3 PROTO
			      C 	 String_lastIndexOf_1 PROTO
			      C 	 String_lastIndexOf_2 PROTO
			      C 	 String_lastIndexOf_3 PROTO
			      C 	 String_replace PROTO
			      C 	 String_concat PROTO
			      C 	 String_toLowerCase PROTO
			      C 	 String_toUpperCase PROTO
			      C 	
			      C 
					
					;Prototypes
					getstring	PROTO Near32 stdcall, lpStringToGet:dword, dlength:dword
					putstring	PROTO Near32 stdcall, lpStringToPrint:dword
					ascint32 	PROTO Near32 stdcall, lpStringOfNumericChars:dword
					intasc32	proto Near32 stdcall, lpStringToHold:dword, dval:dword
					ExitProcess PROTO, dwExitCode:dword
					
					;External Prototypes
					EXTERN setString@0:PROC
					EXTERN String_equals@0:PROC
					EXTERN String_equalsIgnoreCase@0:PROC
					EXTERN String_copy@0:PROC
					EXTERN String_substring_1@0:PROC
					EXTERN String_substring_2@0:PROC
					EXTERN String_charat@0:PROC
					EXTERN String_startsWith_1@0:PROC
					EXTERN String_startsWith_2@0:PROC
					EXTERN String_endsWith@0:PROC
					EXTERN String_indexOf_1@0:PROC
					EXTERN String_indexOf_2@0:PROC
					EXTERN String_indexOf_3@0:PROC
					EXTERN String_lastIndexOf_1@0:PROC
					EXTERN String_lastIndexOf_2@0:PROC
					EXTERN String_lastIndexOf_3@0:PROC
					EXTERN String_replace@0:PROC
					EXTERN String_concat@0:PROC
					EXTERN String_toLowerCase@0:PROC
					EXTERN String_toUpperCase@0:PROC
					
					;Constants


					;Data segment
 00000000				.data
 00000000 4E 55 4C 4C 20	strString1		BYTE "NULL                           ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 00
 00000020 4E 55 4C 4C 20	strString2 		BYTE "NULL                           ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 00

 00000040 2A 2A 2A 2A 2A	strMenu 		BYTE 		"*********************************************************", 0Ah
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 0A
 0000007A 2A 20 20 20 20	strMenu1		BYTE 		"*                       MASM 3                          *", 0Ah
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 4D
	   41 53 4D 20 33
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 0A
 000000B4 2A 20 2D 2D 2D	strMenu2		BYTE 		"* ------------------------------------------------------- ", 0Ah
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 20 0A
 000000EF 2A 20 3C 31 3E	strMenu3		BYTE 		"* <1> Set String1                                currently:", 0
	   20 53 65 74 20
	   53 74 72 69 6E
	   67 31 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 63
	   75 72 72 65 6E
	   74 6C 79 3A 00
 0000012B 00000000 R		dStr1Ptr		DWORD OFFSET strString1															
 0000012F 0A 2A 20 3C 32	strMenu4		BYTE 0Ah, 	"* <2> Set String2                                currently:", 0
	   3E 20 53 65 74
	   20 53 74 72 69
	   6E 67 32 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 0000016C 00000020 R		dStr2Ptr		DWORD OFFSET strString2
 00000170 0A 2A 20 3C 33	strMenu5		BYTE 0Ah,	"* <3> String_length (string1)                    currently:", 0
	   3E 20 53 74 72
	   69 6E 67 5F 6C
	   65 6E 67 74 68
	   20 28 73 74 72
	   69 6E 67 31 29
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000001AD 30			bLength			BYTE 30h, 4 dup(0)
	   00000004 [
	    00
	   ]
 000001B2 0A 2A 20 3C 34	strMenu6		BYTE 0Ah,   "* <4> String_equals (string1, string2)           currently:", 0
	   3E 20 53 74 72
	   69 6E 67 5F 65
	   71 75 61 6C 73
	   20 28 73 74 72
	   69 6E 67 31 2C
	   20 73 74 72 69
	   6E 67 32 29 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000001EF 00000728 R		dEqualsPtr		DWORD OFFSET strFalse
 000001F3 0A 2A 20 3C 35	strMenu7		BYTE 0Ah,   "* <5> String_equalsIgnoreCase(string1, string2)  currently:", 0
	   3E 20 53 74 72
	   69 6E 67 5F 65
	   71 75 61 6C 73
	   49 67 6E 6F 72
	   65 43 61 73 65
	   28 73 74 72 69
	   6E 67 31 2C 20
	   73 74 72 69 6E
	   67 32 29 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000230 00000728 R		dCaseEqualsPtr	DWORD OFFSET strFalse
 00000234 0A 2A 20 3C 36	strMenu8		BYTE 0Ah,   "* <6> String_copy(string1)                       &", 0
	   3E 20 53 74 72
	   69 6E 67 5F 63
	   6F 70 79 28 73
	   74 72 69 6E 67
	   31 29 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   26 00
 00000268 20 20 63 75 72	strMenu8a		BYTE "  currently:", 0
	   72 65 6E 74 6C
	   79 3A 00
 00000275 0000076F R		dStr6Ptr		DWORD OFFSET strNull
 00000279 0A 2A 20 3C 37	strMenu9		BYTE 0Ah,   "* <7> String_substring_1                         &", 0
	   3E 20 53 74 72
	   69 6E 67 5F 73
	   75 62 73 74 72
	   69 6E 67 5F 31
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   26 00
 000002AD 20 20 63 75 72	strMenu9a		BYTE "  currently:", 0
	   72 65 6E 74 6C
	   79 3A 00
 000002BA 0000076F R		dStr7Ptr		DWORD OFFSET strNull
 000002BE 0A 2A 20 3C 38	strMenu10		BYTE 0Ah,   "* <8> String_substring_2                         &", 0
	   3E 20 53 74 72
	   69 6E 67 5F 73
	   75 62 73 74 72
	   69 6E 67 5F 32
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   26 00
 000002F2 20 20 63 75 72	strMenu10a		BYTE "  currently:", 0
	   72 65 6E 74 6C
	   79 3A 00
 000002FF 0000076F R		dStr8Ptr		DWORD OFFSET strNull
 00000303 0A 2A 20 3C 39	strMenu11		BYTE 0Ah,   "* <9> String_charAt                              currently:", 0
	   3E 20 53 74 72
	   69 6E 67 5F 63
	   68 61 72 41 74
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000340  00000002 [		strCharAt 		BYTE 2 DUP(0)
	    00
	   ]
 00000342 0000076F R		dPtrCharAt		DWORD OFFSET strNull
 00000346 0A 2A 20 3C 31	strMenu12		BYTE 0Ah,   "* <10> String_startsWith_1                       currently:", 0
	   30 3E 20 53 74
	   72 69 6E 67 5F
	   73 74 61 72 74
	   73 57 69 74 68
	   5F 31 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000383 00000728 R		dStarts1Ptr		DWORD OFFSET strFalse
 00000387 0A 2A 20 3C 31	strMenu13		BYTE 0Ah,   "* <11> String_startsWith_2                       currently:", 0
	   31 3E 20 53 74
	   72 69 6E 67 5F
	   73 74 61 72 74
	   73 57 69 74 68
	   5F 32 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000003C4 00000728 R		dStarts2Ptr		DWORD OFFSET strFalse
 000003C8 0A 2A 20 3C 31	strMenu14		BYTE 0Ah,   "* <12> String_endsWith                           currently:", 0
	   32 3E 20 53 74
	   72 69 6E 67 5F
	   65 6E 64 73 57
	   69 74 68 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000405 00000728 R		dEndsPtr		DWORD OFFSET strFalse
 00000409 0A 2A 20 3C 31	strMenu15		BYTE 0Ah,   "* <13> String_indexOf_1                          currently:", 0
	   33 3E 20 53 74
	   72 69 6E 67 5F
	   69 6E 64 65 78
	   4F 66 5F 31 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000446 FFFFFFFF		dIndex1			DWORD -1
 0000044A 0A 2A 20 3C 31	strMenu16		BYTE 0Ah,   "* <14> String_indexOf_2                          currently:", 0
	   34 3E 20 53 74
	   72 69 6E 67 5F
	   69 6E 64 65 78
	   4F 66 5F 32 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000487 FFFFFFFF		dIndex2			DWORD -1
 0000048B 0A 2A 20 3C 31	strMenu17		BYTE 0Ah,   "* <15> String_indexOf_3                          currently:", 0
	   35 3E 20 53 74
	   72 69 6E 67 5F
	   69 6E 64 65 78
	   4F 66 5F 33 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000004C8 FFFFFFFF		dIndex3			DWORD -1
 000004CC 0A 2A 20 3C 31	strMenu18		BYTE 0Ah,   "* <16> String_lastIndexOf_1                      currently:", 0
	   36 3E 20 53 74
	   72 69 6E 67 5F
	   6C 61 73 74 49
	   6E 64 65 78 4F
	   66 5F 31 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 00000509 FFFFFFFF		dLastIndex1		DWORD -1
 0000050D 0A 2A 20 3C 31	strMenu19		BYTE 0Ah,   "* <17> String_lastIndexOf_2                      currently:", 0
	   37 3E 20 53 74
	   72 69 6E 67 5F
	   6C 61 73 74 49
	   6E 64 65 78 4F
	   66 5F 32 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 0000054A FFFFFFFF		dLastIndex2		DWORD -1
 0000054E 0A 2A 20 3C 31	strMenu20		BYTE 0Ah,   "* <18> String_lastIndexOf_3                      currently:", 0
	   38 3E 20 53 74
	   72 69 6E 67 5F
	   6C 61 73 74 49
	   6E 64 65 78 4F
	   66 5F 33 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 0000058B FFFFFFFF		dLastIndex3		DWORD -1
 0000058F 0A 2A 20 3C 31	strMenu21		BYTE 0Ah,   "* <19> String_concat                             currently:", 0
	   39 3E 20 53 74
	   72 69 6E 67 5F
	   63 6F 6E 63 61
	   74 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 000005CC 0000076F R		dConcatPtr		DWORD OFFSET strNull
 000005D0 0A 2A 20 3C 32	strMenu22		BYTE 0Ah,   "* <20> String_replace                            currently:", 0
	   30 3E 20 53 74
	   72 69 6E 67 5F
	   72 65 70 6C 61
	   63 65 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 0000060D 0000076F R		dReplacePtr		DWORD OFFSET strNull
 00000611 0A 2A 20 3C 32	strMenu23		BYTE 0Ah,   "* <21> String_toLowerCase                        currently:", 0
	   31 3E 20 53 74
	   72 69 6E 67 5F
	   74 6F 4C 6F 77
	   65 72 43 61 73
	   65 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 0000064E 0000076F R		dLowerPtr		DWORD OFFSET strNull
 00000652 0A 2A 20 3C 32	strMenu24		BYTE 0Ah,   "* <22> String_toUpperCase                        currently:", 0
	   32 3E 20 53 74
	   72 69 6E 67 5F
	   74 6F 55 70 70
	   65 72 43 61 73
	   65 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   63 75 72 72 65
	   6E 74 6C 79 3A
	   00
 0000068F 0000076F R		dUpperPtr		DWORD OFFSET strNull
 00000693 0A 2A 20 3C 32	strMenu25		BYTE 0Ah,   "* <23> Quit                                               *", 0Ah
	   33 3E 20 51 75
	   69 74 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   0A
 000006D0 2A 2A 2A 2A 2A	strMenu26		BYTE        "***********************************************************"
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A
 0000070B 0A 43 68 6F 69	strChoice		BYTE 0Ah, "Choice (1-23): ", 0
	   63 65 20 28 31
	   2D 32 33 29 3A
	   20 00

 0000071C  00000003 [		strInput		BYTE 3 DUP(?), 0
	    00
	   ] 00
 00000720 00000000		dChoice			DWORD ?
 00000724 00000000		dlength			DWORD 0
 00000728 46 41 4C 53 45	strFalse		BYTE "FALSE", 0
	   00
 0000072E 54 52 55 45 00	strTrue			BYTE "TRUE", 0 
 00000733 0A 0A 54 68 65	strErrChoice	BYTE 0Ah, 0Ah, "The desired choice does not exist, re-enter your choice.", 0Ah, 0
	   20 64 65 73 69
	   72 65 64 20 63
	   68 6F 69 63 65
	   20 64 6F 65 73
	   20 6E 6F 74 20
	   65 78 69 73 74
	   2C 20 72 65 2D
	   65 6E 74 65 72
	   20 79 6F 75 72
	   20 63 68 6F 69
	   63 65 2E 0A 00
 0000076F 4E 55 4C 4C 00	strNull			BYTE "NULL", 0
 00000774 57 68 69 63 68	strStringSelect BYTE "Which string do you want the length of( 1 or 2): ", 0
	   20 73 74 72 69
	   6E 67 20 64 6F
	   20 79 6F 75 20
	   77 61 6E 74 20
	   74 68 65 20 6C
	   65 6E 67 74 68
	   20 6F 66 28 20
	   31 20 6F 72 20
	   32 29 3A 20 00
 000007A6  00000002 [		strSelection    BYTE 2 DUP(0)
	    00
	   ]

 000007A8 50 6C 65 61 73	strCharAtPrompt				BYTE 	"Please input an index: ", 0	
	   65 20 69 6E 70
	   75 74 20 61 6E
	   20 69 6E 64 65
	   78 3A 20 00
 000007C0 50 6C 65 61 73	strSubStringPrompt			BYTE 	"Please input a starting index: ", 0
	   65 20 69 6E 70
	   75 74 20 61 20
	   73 74 61 72 74
	   69 6E 67 20 69
	   6E 64 65 78 3A
	   20 00
 000007E0 0A 50 6C 65 61	strSubStringPrompt2			BYTE 	0Ah, "Please input an ending index: ", 0
	   73 65 20 69 6E
	   70 75 74 20 61
	   6E 20 65 6E 64
	   69 6E 67 20 69
	   6E 64 65 78 3A
	   20 00
 00000800  00000005 [		strStartInd					BYTE 	5 DUP(0)
	    00
	   ]
 00000805  00000005 [		strEndInd					BYTE 	5 DUP(0)
	    00
	   ]
 0000080A 00000000		intStartInd					DWORD 	?
 0000080E 00000000		intEndInd					DWORD	?
 00000812 0A 54 68 65 20	strOutOBounds				BYTE 	0Ah, "The specified index is out of bounds, please re-enter your selection", 0Ah, 0
	   73 70 65 63 69
	   66 69 65 64 20
	   69 6E 64 65 78
	   20 69 73 20 6F
	   75 74 20 6F 66
	   20 62 6F 75 6E
	   64 73 2C 20 70
	   6C 65 61 73 65
	   20 72 65 2D 65
	   6E 74 65 72 20
	   79 6F 75 72 20
	   73 65 6C 65 63
	   74 69 6F 6E 0A
	   00
 00000859  00000005 [		strCharInd					BYTE 	5 DUP(0)
	    00
	   ]
 0000085E 00000000		intCharInd					DWORD	?


 00000862 0A 00			strNewLn		BYTE 0Ah, 0
					;Code segment
 00000000				.code
 00000000			main proc								;start of main ;start of program
 00000000  B8 00000000			MOV EAX, 0								;arbitrary

 00000005			START:		
 00000005  E8 00000017			CALL menu								;call the menu sub routine
					
 0000000A  83 3D 00000720 R		CMP dChoice, 23							;compare dChoice value to 23
	   17
 00000011  74 07			JE QUIT									;if dChoice is equal to 23 then jump to QUIT
					
 00000013  E8 000002A2			CALL getSubRoutine						;call the getSubRoutine sub routine
					
 00000018  EB EB			JMP START								;jump to START
					
 0000001A			QUIT:	
					INVOKE ExitProcess,0				;terminate program
 00000021			main ENDP								;end of main procedure

				;----------------------------------------------------------------------------------------------------
 00000021			menu proc
				;
				;		Outputs the menu to the console and waits for input.  The choice is converted from ascii to 
				;	int, for simpler comparison, and then validated.  The choice is then stored into memory labeled 
				;	'intChoice'.
				;
				;	Receives nothing
				;	Returns nothing
				;----------------------------------------------------------------------------------------------------
 00000021  E8 00000000 E		CALL Clrscr								;clear the screen
 00000026  E8 00000048			CALL menuOut

 0000002B			GET:
					INVOKE getstring, addr strInput, 3		;get the string from the console and store it into memory labeled 'strInput'
					INVOKE ascint32, addr strInput			;convert the string from ascii values to integer values
 00000041  A3 00000720 R		MOV dChoice, EAX						;move the value resulting from ascint32 to memory labeled dChoice
					
 00000046  83 3D 00000720 R		cmp dChoice, 23							;compare dChoice to 23
	   17
 0000004D  74 23			JE RETURN								;jump to RETURN if the comparison is equal
 0000004F  7F 0B			JG INVALID								;jump to INVALID if the comparison is greater than 23
					
 00000051  83 3D 00000720 R		CMP dChoice, 1							;compare dChoice to 1
	   01
 00000058  7C 02			JL INVALID								;jump to invalid if the comparison is less than 1
 0000005A  EB 16			JMP RETURN								;jump to RETURN
					
 0000005C			INVALID:
 0000005C  BA 00000733 R		MOV EDX, OFFSET strErrChoice			;move the offset address of strErrChoice into EDX
 00000061  E8 00000000 E		CALL WriteString						;call WriteString sub routine
 00000066  BA 0000070B R		MOV EDX, OFFSET strChoice				;move the offset address of strChoice into EDX
 0000006B  E8 00000000 E		CALL WriteString						;call WriteString sub routine
 00000070  EB B9			JMP GET									;jump to GET
					
 00000072			RETURN:
 00000072  C3				RET										;return
 00000073			menu ENDP								;end of menu

				;----------------------------------------------------------------------------------------------------
 00000073			menuOut proc
				;
				;		Outputs the menu to the console and waits for input.  The choice is converted from ascii to 
				;	int, for simpler comparison, and then validated.  The choice is then stored into memory labeled 
				;	'intChoice'.
				;
				;	Receives nothing
				;	Returns nothing
				;----------------------------------------------------------------------------------------------------
					
					INVOKE putstring, addr strMenu
					INVOKE putstring, dStr1Ptr
					INVOKE putstring, addr strMenu4
					INVOKE putstring, dStr2Ptr
					INVOKE putstring, addr strMenu5
					INVOKE putstring, addr bLength
					INVOKE putstring, addr strMenu6
					INVOKE putstring, dEqualsPtr
					INVOKE putstring, addr strMenu7
					INVOKE putstring, dCaseEqualsPtr
					INVOKE putstring, addr strMenu8
 000000E5  81 3D 00000275 R		CMP dStr6Ptr, OFFSET strNull
	   0000076F R
 000000EF  75 07			JNE LSIXA
 000000F1  B8 00000000			MOV EAX, 0h
 000000F6  EB 05			JMP LSIXB
 000000F8			LSIXA:
 000000F8  A1 00000275 R		MOV EAX, dStr6Ptr
 000000FD			LSIXB:	
 000000FD  E8 00000000 E		CALL WriteHex
					INVOKE putstring, addr strMenu8a
					INVOKE putstring, dStr6Ptr
					INVOKE putstring, addr strMenu9
 00000121  81 3D 000002BA R		CMP dStr7Ptr, OFFSET strNull
	   0000076F R
 0000012B  75 07			JNE LSEVA
 0000012D  B8 00000000			MOV EAX, 0h
 00000132  EB 05			JMP LSEVB
 00000134			LSEVA:
 00000134  A1 000002BA R		MOV EAX, dStr7Ptr
 00000139			LSEVB:	
 00000139  E8 00000000 E		CALL WriteHex
					INVOKE putstring, addr strMenu9a
					INVOKE putstring, dStr7Ptr
					INVOKE putstring, addr strMenu10
 0000015D  81 3D 000002FF R		CMP dStr8Ptr, OFFSET strNull
	   0000076F R
 00000167  75 07			JNE LEIGHTA
 00000169  B8 00000000			MOV EAX, 0h
 0000016E  EB 05			JMP LEIGHTB
 00000170			LEIGHTA:
 00000170  A1 000002FF R		MOV EAX, dStr8Ptr
 00000175			LEIGHTB:	
 00000175  E8 00000000 E		CALL WriteHex
					INVOKE putstring, addr strMenu10a
					INVOKE putstring, dStr8Ptr
					INVOKE putstring, addr strMenu11
					INVOKE putString, dPtrCharAt
					INVOKE putstring, addr strMenu12
					INVOKE putString, dStarts1Ptr
					INVOKE putstring, addr strMenu13
					INVOKE putString, dStarts2Ptr
					INVOKE putstring, addr strMenu14
					INVOKE putString, dEndsPtr
					INVOKE putstring, addr strMenu15
 000001ED  A1 00000446 R		MOV EAX, dIndex1
 000001F2  E8 00000000 E		CALL WriteInt
					INVOKE putstring, addr strMenu16
 00000201  A1 00000487 R		MOV EAX, dIndex2
 00000206  E8 00000000 E		CALL WriteInt
					INVOKE putstring, addr strMenu17
 00000215  A1 000004C8 R		MOV EAX, dIndex3
 0000021A  E8 00000000 E		CALL WriteInt	
					INVOKE putstring, addr strMenu18
 00000229  A1 00000509 R		MOV EAX, dLastIndex1
 0000022E  E8 00000000 E		CALL WriteInt
					INVOKE putstring, addr strMenu19
 0000023D  A1 0000054A R		MOV EAX, dLastIndex2
 00000242  E8 00000000 E		CALL WriteInt
					INVOKE putstring, addr strMenu20
 00000251  A1 0000058B R		MOV EAX, dLastIndex3
 00000256  E8 00000000 E		CALL WriteInt
					INVOKE putstring, addr strMenu21
					INVOKE putstring, dConcatPtr
					INVOKE putstring, addr strMenu22
					INVOKE putstring, dReplacePtr
					INVOKE putstring, addr strMenu23
					INVOKE putstring, dLowerPtr
					INVOKE putstring, addr strMenu24
					INVOKE putstring, dUpperPtr
					INVOKE putstring, addr strMenu25
					
 000002B9  C3				RET
 000002BA			menuOut ENDP


				;----------------------------------------------------------------------------------------------------
 000002BA			getSubRoutine proc
				;
				;		This sub routine will first push the offset addresses for strString1 and strString2 on to the 
				;	stack and then call the appropriate sub routine.  The choice that was input from the menu sub routine
				;	will be moved into EAX and compared against hard coded values to call the specified sub routine.
				;
				;	Receives nothing 
				;	Returns nothing
				;----------------------------------------------------------------------------------------------------
 000002BA  B8 00000020 R		MOV EAX, OFFSET strString2				;move the offset address of strString2 into EAX
 000002BF  BB 00000000 R		MOV EBX, OFFSET strString1				;move the offset address of strString1 into EBX
					
 000002C4  8B 15 00000720 R		MOV EDX, dChoice						;move dChoice into EDX for if statements
					
					.if EDX == 1;---------------------------	
 000002CF  53				PUSH EBX								;push EBX
 000002D0  E8 00000000 E		CALL setString@0						;call setString@4
 000002D5  83 C4 04			ADD ESP, 4								;add 4 bytes to ESP
					
 000002D8  E9 00000498			JMP RETURN
					
					.elseif EDX == 2;-----------------------
 000002E7  50				PUSH EAX								;push EAX
 000002E8  E8 00000000 E		CALL setString@0						;call setString@4
 000002ED  83 C4 04			ADD ESP, 4								;add 4 bytes to ESP
					
 000002F0  E9 00000480			JMP RETURN
					
					.elseif EDX == 3;-----------------------
 000002FF  E8 00000000 E		CALL Clrscr
					
					INVOKE putString, addr strStringSelect	;display prompt
					INVOKE getString, addr strSelection, 3	;get input
					
 0000031A  80 3D 000007A6 R		CMP strSelection, 32h					;compare to ascii code for integer 2
	   32
 00000321  74 03			JE STR2
					
 00000323  53				PUSH EBX								;push EBX
 00000324  EB 06			JMP LENGTHCALL							;jump to call
 00000326			STR2:
 00000326  B8 00000020 R		MOV EAX, OFFSET strString2				;move the offset address of strString2 into EAX
 0000032B  50				PUSH EAX								;push EAX
					
 0000032C			LENGTHCALL:
 0000032C  E8 00000445			CALL String_length						;call String_length
					INVOKE intasc32, addr bLength, EAX		;convert integer into ascii characters
					
 0000033C  E9 00000434			JMP RETURN
					
					.elseif EDX == 4;-----------------------
 0000034B  BA 00000728 R		MOV EDX, OFFSET strFalse				;move the offset address of strFalse into EDX
 00000350  89 15 000001EF R		MOV dEqualsPtr, EDX						;set dEqualsPtr equal to EDX
					
 00000356  50				PUSH EAX								;push EAX
 00000357  53				PUSH EBX								;push EBX
 00000358  E8 00000000 E		CALL String_equals@0					;call String_equals@8
 0000035D  83 C4 08			ADD ESP, 8
					
 00000360  3C 00			CMP AL, 0								;compare AL to zero
 00000362  74 0B			JE J4									;jump to J4 if AL == 0
 00000364  BA 0000072E R		MOV EDX, OFFSET strTrue					;move the offset address of strTrue into EDX
 00000369  89 15 000001EF R		MOV dEqualsPtr, EDX						;set dEqualsPtr equal to EDX
 0000036F			J4:
 0000036F  E9 00000401			JMP RETURN
					
					.elseif EDX == 5;-----------------------
 0000037E  BA 00000728 R		MOV EDX, OFFSET strFalse				;move the offset address of strFalse into EDX
 00000383  89 15 00000230 R		MOV dCaseEqualsPtr, EDX					;set dCaseEqualsPtr equal to EDX
					
 00000389  50				PUSH EAX								;push EAX
 0000038A  53				PUSH EBX								;push EBX
 0000038B  E8 00000000 E		CALL String_equalsIgnoreCase@0			;call String_equalsIgnoreCase
 00000390  83 C4 08			ADD ESP, 8
					
 00000393  3C 00			CMP AL, 0								;compare AL to zero
 00000395  74 0B			JE J5									;jump to J5 if AL == 0
 00000397  BA 0000072E R		MOV EDX, OFFSET strTrue					;move the offset address of strTrue into EDX
 0000039C  89 15 00000230 R		MOV dCaseEqualsPtr, EDX					;set dCaseEqualsPtr equal to EDX
 000003A2			J5:
 000003A2  E9 000003CE			JMP RETURN
					
					.elseif EDX == 6;-----------------------
 000003B1  53				PUSH EBX								;push EBX to the stack
 000003B2  E8 00000000 E		CALL String_copy@0						;call String_copy@4
 000003B7  83 C4 04			ADD ESP, 4
 000003BA  A3 00000275 R		MOV dStr6Ptr, EAX						;move new address into memory
					
 000003BF  E9 000003B1			JMP RETURN
					
					.elseif EDX == 7;-----------------------
 000003D2  E8 00000000 E		CALL Clrscr										;clear the screen
					
 000003D7				PROMPT7a:
 000003D7  BB 00000000			MOV EBX, 0										;move 0 into EBX
					INVOKE putString, addr strSubStringPrompt		;write prompt to the console
					INVOKE getString, addr strStartInd, 3			;get input from the console
					INVOKE ascint32, addr strStartInd				;convert ascii values to real integer values
 000003FC  8B C8			MOV ECX, EAX									;move result into ECX
					
 000003FE  83 F9 00			CMP ECX, 0										;compare result to 1
 00000401  7C 5F			JL OUTOFBOUNDS7									;jump to OUTOFBOUNDS if the input value is >1
 00000403  BE 00000000 R		MOV ESI, OFFSET strString1						;move the offset address of strString1 into ESI
 00000408  56				PUSH ESI										;push ESI
 00000409  E8 00000368			CALL String_length								;get length of [intStrAddr]	
 0000040E  3B C8			CMP ECX, EAX									;compare result to stringLrngth
 00000410  7F 50			JG OUTOFBOUNDS7									;jump to OUTOFBOUNDS if the input value > length
					
 00000412			PROMPT7b:										;move 1 into EBX
					INVOKE putString, addr strSubStringPrompt2		;write prompt to the console							;call WriteString
					INVOKE getString, addr strEndInd, 3				;get the input from the console
					INVOKE ascint32, addr strEndInd					;convert ascii values to real integer values
 00000432  A3 0000080E R		MOV intEndInd, EAX								;move result of conversion into intEndInd
 00000437  8B D0			MOV EDX, EAX									;move result into EDX

 00000439  BB 00000001			MOV EBX, 1	
 0000043E  83 FA 00			CMP EDX, 0										;compare result to 1
 00000441  7C 1F			JL OUTOFBOUNDS7									;jump to OUTOFBOUNDS if the input value is >1
 00000443  56				PUSH ESI										;push ESI
 00000444  E8 0000032D			CALL String_length								;get length of [intStrAddr]	
 00000449  3B D0			CMP EDX, EAX									;compare result to stringLrngth
 0000044B  7F 15			JG OUTOFBOUNDS7									;jump to OUTOFBOUNDS if the input value > length
					
 0000044D  52				PUSH EDX										;push EDX
 0000044E  51				PUSH ECX										;push ECX
 0000044F  56				PUSH ESI										;PUSH ESI
 00000450  E8 00000000 E		CALL String_substring_1@0						;call String_substring_1@8
 00000455  83 C4 0C			ADD ESP, 12
 00000458  A3 000002BA R		MOV dStr7Ptr, EAX								;move resulting address to dStr7Ptr
					
 0000045D  E9 00000313			JMP RETURN
					
 00000462			OUTOFBOUNDS7:
					INVOKE putString, addr strOutOBounds			;output out of bounds message to the console
 0000046C  83 FB 00			CMP EBX, 0										;compare EBX to 0 (first or second prompt)
 0000046F  0F 84 FFFFFF62		JE PROMPT7a										;jump if equal to PROMPT1
 00000475  EB 9B			JMP PROMPT7b									;otherwise jump to PROMPT2
					
					.elseif EDX == 8;-----------------------
 00000481  E8 00000000 E		CALL Clrscr										;call clear screen

 00000486				PROMPT8:
 00000486  BB 00000000			MOV EBX, 0										;move 0 into EBX
					INVOKE putString, addr strSubStringPrompt		;write prompt to the console
					INVOKE getString, addr strStartInd, 3			;get input from the console
					INVOKE ascint32, addr strStartInd				;convert ascii values to real integer values
 000004AB  8B C8			MOV ECX, EAX									;move result into ECX
					
 000004AD  83 F9 00			CMP ECX, 0										;compare result to 1
 000004B0  7C 23			JL OUTOFBOUNDS8									;jump to OUTOFBOUNDS if the input value is >1
 000004B2  BE 00000000 R		MOV ESI, OFFSET strString1						;move the offset address of strString1 into ESI
 000004B7  56				PUSH ESI										;push ESI
 000004B8  E8 000002B9			CALL String_length								;get length of [intStrAddr]	
 000004BD  3B C8			CMP ECX, EAX									;compare result to stringLrngth
 000004BF  7F 14			JG OUTOFBOUNDS8									;jump to OUTOFBOUNDS if the input value > length
					

 000004C1  51				PUSH ECX										;push ECX
 000004C2  56				PUSH ESI										;push ESI
 000004C3  E8 00000000 E		CALL String_substring_2@0						;call String_substring_1@8
 000004C8  83 C4 08			ADD ESP, 8
 000004CB  A3 000002FF R		MOV dStr8Ptr, EAX								;move new address into memory
					
 000004D0  E9 000002A0			JMP RETURN
					
 000004D5			OUTOFBOUNDS8:
					INVOKE putString, addr strOutOBounds			;output the out of bounds message to the console
 000004DF  EB A5			JMP PROMPT8
					
					.elseif EDX == 9;-----------------------
 000004EB  E8 00000000 E		CALL Clrscr											;call clear screen
					
					INVOKE putString, addr strCharAtPrompt			;write index prompt to the console
					INVOKE getString, addr strCharInd, 3			;get input from the console
					INVOKE ascint32, addr strCharInd				;convert ascii values to real integer values
					
 00000510  50				PUSH EAX										;push EAX
 00000511  53				PUSH EBX										;push ESI
 00000512  E8 00000000 E		CALL String_charat@0							;call String_charat
 00000517  83 C4 08			ADD ESP, 8										
					
 0000051A  3C 00			CMP AL, 0
 0000051C  0F 84 00000253		JE RETURN
 00000522  C7 05 00000342 R		MOV dPtrCharAt, OFFSET strCharAt				;move char address into memory
	   00000340 R
 0000052C  A2 00000340 R		MOV strCharAt, AL
					
 00000531  E9 0000023F			JMP RETURN
					
					.elseif EDX == 10;-----------------------
 00000540  E8 00000000 E		CALL Clrscr
 00000545  BA 00000728 R		MOV EDX, OFFSET strFalse						;move the offset address of strFalse into EDX
 0000054A  89 15 00000383 R		MOV dStarts1Ptr, EDX							;set dEqualsPtr equal to EDX
					
					INVOKE putString, addr strCharAtPrompt			;write index prompt to the console
					INVOKE getString, addr strCharInd, 3			;get input from the console
					INVOKE ascint32, addr strCharInd				;convert ascii values to real integer values
					
 00000570  50				PUSH EAX										;push EAX
 00000571  B8 00000020 R		MOV EAX, OFFSET strString2						;move the offset address of strString2 into EAX
 00000576  50				PUSH EAX										;push EAX
 00000577  53				PUSH EBX										;push ESI
 00000578  E8 00000000 E		CALL String_startsWith_1@0						;call String_startsWith_1
 0000057D  83 C4 0C			ADD ESP, 12
					
 00000580  3C 00			CMP AL, 0										;compare AL to zero
 00000582  74 0B			JE J10											;jump to J4 if AL == 0
 00000584  BA 0000072E R		MOV EDX, OFFSET strTrue							;move the offset address of strTrue into EDX
 00000589  89 15 00000383 R		MOV dStarts1Ptr, EDX							;set dEqualsPtr equal to EDX
 0000058F			J10:
 0000058F  E9 000001E1			JMP RETURN
					
					.elseif EDX == 11;-----------------------
 0000059E  E8 00000000 E		CALL Clrscr
 000005A3  BA 00000728 R		MOV EDX, OFFSET strFalse						;move the offset address of strFalse into EDX
 000005A8  89 15 000003C4 R		MOV dStarts2Ptr, EDX							;set dEqualsPtr equal to EDX
					
 000005AE  50				PUSH EAX										;push EAX
 000005AF  53				PUSH EBX										;push ESI
 000005B0  E8 00000000 E		CALL String_startsWith_2@0						;call String_startsWith_1
 000005B5  83 C4 08			ADD ESP, 8
					
 000005B8  3C 00			CMP AL, 0										;compare AL to zero
 000005BA  74 0B			JE J11											;jump to J4 if AL == 0
 000005BC  BA 0000072E R		MOV EDX, OFFSET strTrue							;move the offset address of strTrue into EDX
 000005C1  89 15 000003C4 R		MOV dStarts2Ptr, EDX							;set dEqualsPtr equal to EDX
 000005C7			J11:
 000005C7  E9 000001A9			JMP RETURN
					
					.elseif EDX == 12;-----------------------
 000005D6  E8 00000000 E		CALL Clrscr
 000005DB  BA 00000728 R		MOV EDX, OFFSET strFalse						;move the offset address of strFalse into EDX
 000005E0  89 15 00000405 R		MOV dEndsPtr, EDX								;set dEqualsPtr equal to EDX
					
 000005E6  50				PUSH EAX										;push EAX
 000005E7  53				PUSH EBX										;push ESI
 000005E8  E8 00000000 E		CALL String_endsWith@0							;call String_startsWith_1
 000005ED  83 C5 08			ADD EBP, 8
					
 000005F0  3C 00			CMP AL, 0										;compare AL to zero
 000005F2  74 0B			JE J12											;jump to J4 if AL == 0
 000005F4  BA 0000072E R		MOV EDX, OFFSET strTrue							;move the offset address of strTrue into EDX
 000005F9  89 15 00000405 R		MOV dEndsPtr, EDX								;set dEqualsPtr equal to EDX
 000005FF			J12:
 000005FF  E9 00000171			JMP RETURN
					
					.elseif EDX == 13;-----------------------
 0000060E  E8 00000000 E		Call CLrscr
 00000613  53				push EBX
 00000614  E8 00000000 E		call String_indexOf_1
 00000619  83 C4 04			add esp, 4
 0000061C  A3 00000446 R		mov dIndex1, EAX
 00000621  E9 0000014F			JMP RETURN
					
					.elseif EDX == 14;-----------------------
 00000630  E8 00000000 E		Call CLrscr
 00000635  68 00000000 R		push offset strString1
 0000063A  E8 00000000 E		call String_indexOf_2
 0000063F  83 C4 04			add esp, 4
 00000642  A3 00000487 R		mov dIndex2, eax
 00000647  E9 00000129			JMP RETURN
					
					.elseif EDX == 15;-----------------------
 00000656  E8 00000000 E		Call CLrscr
 0000065B  68 00000020 R		push offset strString2
 00000660  68 00000000 R		push offset strString1
 00000665  E8 00000000 E		call String_indexOf_3
 0000066A  83 C4 08			add esp, 8
 0000066D  A3 000004C8 R		mov dIndex3, eax
 00000672  E9 000000FE			JMP RETURN
					
					.elseif EDX == 16;-----------------------
 00000681  E8 00000000 E		Call CLrscr
 00000686  68 00000000 R		push offset strString1
 0000068B  E8 00000000 E		call String_lastIndexOf_1
 00000690  83 C4 04			add esp, 4
 00000693  A3 00000509 R		mov dLastIndex1, EAX
 00000698  E9 000000D8			JMP RETURN
					
					.elseif EDX == 17;-----------------------
 000006A7  E8 00000000 E		Call CLrscr
 000006AC  68 00000000 R		push offset strString1
 000006B1  E8 00000000 E		call String_lastIndexOf_2
 000006B6  83 C4 04			add esp, 4
 000006B9  A3 0000054A R		mov dLastIndex2, EAX
					
 000006BE  E9 000000B2			JMP RETURN
					
					.elseif EDX == 18;-----------------------
 000006CD  E8 00000000 E		call CLrscr
 000006D2  68 00000020 R		push offset strString2
 000006D7  68 00000000 R		push offset strString1
 000006DC  E8 00000000 E		call String_lastIndexOf_3
 000006E1  83 C4 08			add esp, 8
 000006E4  A3 0000058B R		mov dLastIndex3, eax
 000006E9  E9 00000087			JMP RETURN
					
					.elseif EDX == 19;-----------------------
 000006F8  E8 00000000 E		call CLrscr
 000006FD  68 00000020 R		push offset strString2
 00000702  68 00000000 R		push offset strString1
 00000707  E8 00000000 E		call String_concat
 0000070C  83 C4 08			add esp, 8
 0000070F  A3 000005CC R		mov dConcatPtr, EAX
 00000714  EB 5F			JMP RETURN
					
					.elseif EDX == 20;-----------------------
 0000071D  E8 00000000 E		call CLrscr
 00000722  68 00000020 R		push offset strString2
 00000727  68 00000000 R		push offset strString1
 0000072C  E8 00000000 E		call String_replace
 00000731  83 C4 08			add esp, 8
 00000734  A3 0000060D R		mov dReplacePtr, EAX
 00000739  EB 3A			JMP RETURN
					
					.elseif EDX == 21;-----------------------
 00000742  E8 00000000 E		call CLrscr
 00000747  50				push EAX
 00000748  53				push EBX
 00000749  E8 00000000 E		call String_toLowerCase@0
 0000074E  83 C4 08			add esp, 8
 00000751  A3 0000064E R		mov dLowerPtr, EAX
 00000756  EB 1D			JMP RETURN
					
					.elseif EDX == 22;-----------------------
 0000075F  E8 00000000 E		call CLrscr
 00000764  50				push EAX
 00000765  53				push EBX
 00000766  E8 00000000 E		call String_toUpperCase@0
 0000076B  83 C4 08			add esp, 8
 0000076E  A3 0000068F R		mov dUpperPtr, EAX
 00000773  EB 00			JMP RETURN
					
					.endif
					
 00000775			RETURN:
 00000775  C3				RET										;return
 00000776			getSubRoutine ENDP						;end of getSubRoutine

				;----------------------------------------------------------------------------------------------------
 00000776			String_length proc, intStrAddr:DWORD
				;
				;		This sub routine counts the number of elements in strStringX and stores the result in EAX.
				;
				;	Receives the address of strStringX
				;	Returns the value in the EAX register
				;----------------------------------------------------------------------------------------------------
 00000779  BB 00000000			MOV EBX, 0								;clear the EBX register
 0000077E  B8 00000000			MOV EAX, 0								;clear the EAX register
					
 00000783  8B 7D 08			MOV EDI, intStrAddr						;move str1Addr into EDI for indirect addressing
					
 00000786			L1:
 00000786  8A 1F			MOV BL, [EDI]							;move the nth element of strString1 into BL
 00000788  80 FB 00			CMP BL, 0								;compare BL to 0
 0000078B  74 04			JE RETURN								;jump to RETURN if the comparison is equal
 0000078D  40				INC EAX									;increment EAX
 0000078E  47				INC EDI									;increment string address to go to the next element
 0000078F  EB F5			JMP L1									;loop to L1
					
 00000791			RETURN:
					RET										;return
 00000795			String_length ENDP						;end of String_length

				end main								;end of main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/19/18 21:12:36
masm3.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000864 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000795 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_charat  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_concat  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_copy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_endsWith  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_equalsIgnoreCase  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_equals  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_indexOf_1 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_indexOf_2 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_indexOf_3 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_lastIndexOf_1 . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_lastIndexOf_2 . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_lastIndexOf_3 . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_length  . . . . . . . . .	P Near	 00000776 _TEXT	Length= 0000001F Public STDCALL
  intStrAddr . . . . . . . . . .	DWord	 bp + 00000008
  L1 . . . . . . . . . . . . . .	L Near	 00000786 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 00000791 _TEXT	
String_replace . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_startsWith_1  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_startsWith_2  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_substring_1 . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_substring_2 . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_toLowerCase . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_toUpperCase . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getSubRoutine  . . . . . . . . .	P Near	 000002BA _TEXT	Length= 000004BC Public STDCALL
  STR2 . . . . . . . . . . . . .	L Near	 00000326 _TEXT	
  LENGTHCALL . . . . . . . . . .	L Near	 0000032C _TEXT	
  J4 . . . . . . . . . . . . . .	L Near	 0000036F _TEXT	
  J5 . . . . . . . . . . . . . .	L Near	 000003A2 _TEXT	
  PROMPT7a . . . . . . . . . . .	L Near	 000003D7 _TEXT	
  PROMPT7b . . . . . . . . . . .	L Near	 00000412 _TEXT	
  OUTOFBOUNDS7 . . . . . . . . .	L Near	 00000462 _TEXT	
  PROMPT8  . . . . . . . . . . .	L Near	 00000486 _TEXT	
  OUTOFBOUNDS8 . . . . . . . . .	L Near	 000004D5 _TEXT	
  J10  . . . . . . . . . . . . .	L Near	 0000058F _TEXT	
  J11  . . . . . . . . . . . . .	L Near	 000005C7 _TEXT	
  J12  . . . . . . . . . . . . .	L Near	 000005FF _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 00000775 _TEXT	
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000021 Public STDCALL
  START  . . . . . . . . . . . .	L Near	 00000005 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000001A _TEXT	
menuOut  . . . . . . . . . . . .	P Near	 00000073 _TEXT	Length= 00000247 Public STDCALL
  LSIXA  . . . . . . . . . . . .	L Near	 000000F8 _TEXT	
  LSIXB  . . . . . . . . . . . .	L Near	 000000FD _TEXT	
  LSEVA  . . . . . . . . . . . .	L Near	 00000134 _TEXT	
  LSEVB  . . . . . . . . . . . .	L Near	 00000139 _TEXT	
  LEIGHTA  . . . . . . . . . . .	L Near	 00000170 _TEXT	
  LEIGHTB  . . . . . . . . . . .	L Near	 00000175 _TEXT	
menu . . . . . . . . . . . . . .	P Near	 00000021 _TEXT	Length= 00000052 Public STDCALL
  GET  . . . . . . . . . . . . .	L Near	 0000002B _TEXT	
  INVALID  . . . . . . . . . . .	L Near	 0000005C _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 00000072 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
setString  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
String_charat@0  . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_concat@0  . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_copy@0  . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_endsWith@0  . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_equals@0  . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_equalsIgnoreCase@0  . . .	L Near	 00000000 FLAT	External STDCALL
String_indexOf_1@0 . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_indexOf_2@0 . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_indexOf_3@0 . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_lastIndexOf_1@0 . . . . .	L Near	 00000000 FLAT	External STDCALL
String_lastIndexOf_2@0 . . . . .	L Near	 00000000 FLAT	External STDCALL
String_lastIndexOf_3@0 . . . . .	L Near	 00000000 FLAT	External STDCALL
String_replace@0 . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_startsWith_1@0  . . . . .	L Near	 00000000 FLAT	External STDCALL
String_startsWith_2@0  . . . . .	L Near	 00000000 FLAT	External STDCALL
String_substring_1@0 . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_substring_2@0 . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_toLowerCase@0 . . . . . .	L Near	 00000000 FLAT	External STDCALL
String_toUpperCase@0 . . . . . .	L Near	 00000000 FLAT	External STDCALL
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
bLength  . . . . . . . . . . . .	Byte	 000001AD _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dCaseEqualsPtr . . . . . . . . .	DWord	 00000230 _DATA	
dChoice  . . . . . . . . . . . .	DWord	 00000720 _DATA	
dConcatPtr . . . . . . . . . . .	DWord	 000005CC _DATA	
dEndsPtr . . . . . . . . . . . .	DWord	 00000405 _DATA	
dEqualsPtr . . . . . . . . . . .	DWord	 000001EF _DATA	
dIndex1  . . . . . . . . . . . .	DWord	 00000446 _DATA	
dIndex2  . . . . . . . . . . . .	DWord	 00000487 _DATA	
dIndex3  . . . . . . . . . . . .	DWord	 000004C8 _DATA	
dLastIndex1  . . . . . . . . . .	DWord	 00000509 _DATA	
dLastIndex2  . . . . . . . . . .	DWord	 0000054A _DATA	
dLastIndex3  . . . . . . . . . .	DWord	 0000058B _DATA	
dLowerPtr  . . . . . . . . . . .	DWord	 0000064E _DATA	
dPtrCharAt . . . . . . . . . . .	DWord	 00000342 _DATA	
dReplacePtr  . . . . . . . . . .	DWord	 0000060D _DATA	
dStarts1Ptr  . . . . . . . . . .	DWord	 00000383 _DATA	
dStarts2Ptr  . . . . . . . . . .	DWord	 000003C4 _DATA	
dStr1Ptr . . . . . . . . . . . .	DWord	 0000012B _DATA	
dStr2Ptr . . . . . . . . . . . .	DWord	 0000016C _DATA	
dStr6Ptr . . . . . . . . . . . .	DWord	 00000275 _DATA	
dStr7Ptr . . . . . . . . . . . .	DWord	 000002BA _DATA	
dStr8Ptr . . . . . . . . . . . .	DWord	 000002FF _DATA	
dUpperPtr  . . . . . . . . . . .	DWord	 0000068F _DATA	
dlength  . . . . . . . . . . . .	DWord	 00000724 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intCharInd . . . . . . . . . . .	DWord	 0000085E _DATA	
intEndInd  . . . . . . . . . . .	DWord	 0000080E _DATA	
intStartInd  . . . . . . . . . .	DWord	 0000080A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
setString@0  . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
strCharAtPrompt  . . . . . . . .	Byte	 000007A8 _DATA	
strCharAt  . . . . . . . . . . .	Byte	 00000340 _DATA	
strCharInd . . . . . . . . . . .	Byte	 00000859 _DATA	
strChoice  . . . . . . . . . . .	Byte	 0000070B _DATA	
strEndInd  . . . . . . . . . . .	Byte	 00000805 _DATA	
strErrChoice . . . . . . . . . .	Byte	 00000733 _DATA	
strFalse . . . . . . . . . . . .	Byte	 00000728 _DATA	
strInput . . . . . . . . . . . .	Byte	 0000071C _DATA	
strMenu10a . . . . . . . . . . .	Byte	 000002F2 _DATA	
strMenu10  . . . . . . . . . . .	Byte	 000002BE _DATA	
strMenu11  . . . . . . . . . . .	Byte	 00000303 _DATA	
strMenu12  . . . . . . . . . . .	Byte	 00000346 _DATA	
strMenu13  . . . . . . . . . . .	Byte	 00000387 _DATA	
strMenu14  . . . . . . . . . . .	Byte	 000003C8 _DATA	
strMenu15  . . . . . . . . . . .	Byte	 00000409 _DATA	
strMenu16  . . . . . . . . . . .	Byte	 0000044A _DATA	
strMenu17  . . . . . . . . . . .	Byte	 0000048B _DATA	
strMenu18  . . . . . . . . . . .	Byte	 000004CC _DATA	
strMenu19  . . . . . . . . . . .	Byte	 0000050D _DATA	
strMenu1 . . . . . . . . . . . .	Byte	 0000007A _DATA	
strMenu20  . . . . . . . . . . .	Byte	 0000054E _DATA	
strMenu21  . . . . . . . . . . .	Byte	 0000058F _DATA	
strMenu22  . . . . . . . . . . .	Byte	 000005D0 _DATA	
strMenu23  . . . . . . . . . . .	Byte	 00000611 _DATA	
strMenu24  . . . . . . . . . . .	Byte	 00000652 _DATA	
strMenu25  . . . . . . . . . . .	Byte	 00000693 _DATA	
strMenu26  . . . . . . . . . . .	Byte	 000006D0 _DATA	
strMenu2 . . . . . . . . . . . .	Byte	 000000B4 _DATA	
strMenu3 . . . . . . . . . . . .	Byte	 000000EF _DATA	
strMenu4 . . . . . . . . . . . .	Byte	 0000012F _DATA	
strMenu5 . . . . . . . . . . . .	Byte	 00000170 _DATA	
strMenu6 . . . . . . . . . . . .	Byte	 000001B2 _DATA	
strMenu7 . . . . . . . . . . . .	Byte	 000001F3 _DATA	
strMenu8a  . . . . . . . . . . .	Byte	 00000268 _DATA	
strMenu8 . . . . . . . . . . . .	Byte	 00000234 _DATA	
strMenu9a  . . . . . . . . . . .	Byte	 000002AD _DATA	
strMenu9 . . . . . . . . . . . .	Byte	 00000279 _DATA	
strMenu  . . . . . . . . . . . .	Byte	 00000040 _DATA	
strNewLn . . . . . . . . . . . .	Byte	 00000862 _DATA	
strNull  . . . . . . . . . . . .	Byte	 0000076F _DATA	
strOutOBounds  . . . . . . . . .	Byte	 00000812 _DATA	
strSelection . . . . . . . . . .	Byte	 000007A6 _DATA	
strStartInd  . . . . . . . . . .	Byte	 00000800 _DATA	
strString1 . . . . . . . . . . .	Byte	 00000000 _DATA	
strString2 . . . . . . . . . . .	Byte	 00000020 _DATA	
strStringSelect  . . . . . . . .	Byte	 00000774 _DATA	
strSubStringPrompt2  . . . . . .	Byte	 000007E0 _DATA	
strSubStringPrompt . . . . . . .	Byte	 000007C0 _DATA	
strTrue  . . . . . . . . . . . .	Byte	 0000072E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
